{
  "_args": [
    [
      {
        "raw": "@turf/meta@^4.7.3",
        "scope": "@turf",
        "escapedName": "@turf%2fmeta",
        "name": "@turf/meta",
        "rawSpec": "^4.7.3",
        "spec": ">=4.7.3 <5.0.0",
        "type": "range"
      },
      "/home/devrabbit/Desktop/ReactProject/node_modules/@turf/bbox"
    ]
  ],
  "_from": "@turf/meta@>=4.7.3 <5.0.0",
  "_id": "@turf/meta@4.7.4",
  "_inCache": true,
  "_location": "/@turf/meta",
  "_nodeVersion": "6.11.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/meta-4.7.4.tgz_1506385701404_0.8420534876640886"
  },
  "_npmUser": {
    "name": "deniscarriere",
    "email": "carriere.denis@gmail.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@turf/meta@^4.7.3",
    "scope": "@turf",
    "escapedName": "@turf%2fmeta",
    "name": "@turf/meta",
    "rawSpec": "^4.7.3",
    "spec": ">=4.7.3 <5.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@turf/bbox"
  ],
  "_resolved": "https://registry.npmjs.org/@turf/meta/-/meta-4.7.4.tgz",
  "_shasum": "6de2f1e9890b8f64b669e4b47c09b20893063977",
  "_shrinkwrap": null,
  "_spec": "@turf/meta@^4.7.3",
  "_where": "/home/devrabbit/Desktop/ReactProject/node_modules/@turf/bbox",
  "author": {
    "name": "Turf Authors"
  },
  "bugs": {
    "url": "https://github.com/Turfjs/turf/issues"
  },
  "contributors": [
    {
      "name": "Tom MacWright",
      "email": "@tmcw"
    },
    {
      "name": "Daniel Pulido",
      "email": "@dpmcmlxxvi"
    },
    {
      "name": "Denis Carriere",
      "email": "@DenisCarriere"
    }
  ],
  "dependencies": {},
  "description": "turf meta module",
  "devDependencies": {
    "@turf/helpers": "*",
    "@turf/random": "*",
    "benchmark": "*",
    "rollup": "*",
    "tape": "*"
  },
  "directories": {},
  "dist": {
    "shasum": "6de2f1e9890b8f64b669e4b47c09b20893063977",
    "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-4.7.4.tgz"
  },
  "files": [
    "index.js",
    "index.d.ts",
    "index.es5.js"
  ],
  "homepage": "https://github.com/Turfjs/turf",
  "jsnext:main": "index.js",
  "keywords": [
    "functional",
    "programming",
    "turfjs",
    "geojson",
    "meta",
    "flattenEach",
    "flattenReduce",
    "segmentEach",
    "segmentReduce",
    "coordEach",
    "coordReduce",
    "propEach",
    "propReduce",
    "featureEach",
    "featureReduce",
    "coordAll",
    "geomEach",
    "geomReduce"
  ],
  "license": "MIT",
  "main": "index.es5.js",
  "maintainers": [
    {
      "name": "deniscarriere",
      "email": "carriere.denis@gmail.com"
    },
    {
      "name": "tcql",
      "email": "tim.channell@gmail.com"
    },
    {
      "name": "morganherlocker",
      "email": "morgan.herlocker@gmail.com"
    },
    {
      "name": "tmcw",
      "email": "tom@macwright.org"
    }
  ],
  "module": "index.js",
  "name": "@turf/meta",
  "optionalDependencies": {},
  "readme": "# @turf/meta\n\n# coordEachCallback\n\nCallback for coordEach\n\n**Parameters**\n\n-   `currentCoord` **[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)&lt;[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)>** The current coordinate being processed.\n-   `coordIndex` **[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)** The current index of the coordinate being processed.\n    Starts at index 0.\n-   `featureIndex` **[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)** The current index of the feature being processed.\n-   `featureSubIndex` **[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)** The current subIndex of the feature being processed.\n-   `geojson`  \n-   `callback`  \n-   `excludeWrapCoord`  \n\n# coordEach\n\nIterate over coordinates in any GeoJSON object, similar to Array.forEach()\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection](http://geojson.org/geojson-spec.html#feature-collection-objects) \\| [Feature](http://geojson.org/geojson-spec.html#feature-objects) \\| [Geometry](http://geojson.org/geojson-spec.html#geometry))** any GeoJSON object\n-   `callback` **[Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function)** a method that takes (currentCoord, coordIndex, featureIndex, featureSubIndex)\n-   `excludeWrapCoord` **\\[[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean)]** whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration. (optional, default `false`)\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {\"foo\": \"bar\"}),\n  turf.point([36, 53], {\"hello\": \"world\"})\n]);\n\nturf.coordEach(features, function (currentCoord, coordIndex, featureIndex, featureSubIndex) {\n  //=currentCoord\n  //=coordIndex\n  //=featureIndex\n  //=featureSubIndex\n});\n```\n\n# coordReduce\n\nReduce coordinates in any GeoJSON object, similar to Array.reduce()\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection](http://geojson.org/geojson-spec.html#feature-collection-objects) \\| [Geometry](http://geojson.org/geojson-spec.html#geometry) \\| [Feature](http://geojson.org/geojson-spec.html#feature-objects))** any GeoJSON object\n-   `callback` **[Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function)** a method that takes (previousValue, currentCoord, coordIndex)\n-   `initialValue` **\\[Any]** Value to use as the first argument to the first call of the callback.\n-   `excludeWrapCoord` **\\[[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean)]** whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration. (optional, default `false`)\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {\"foo\": \"bar\"}),\n  turf.point([36, 53], {\"hello\": \"world\"})\n]);\n\nturf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, featureSubIndex) {\n  //=previousValue\n  //=currentCoord\n  //=coordIndex\n  //=featureIndex\n  //=featureSubIndex\n  return currentCoord;\n});\n```\n\nReturns **Any** The value that results from the reduction.\n\n# coordReduceCallback\n\nCallback for coordReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n-   The previousValue argument is initialValue.\n-   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n-   The previousValue argument is the value of the first element present in the array.\n-   The currentValue argument is the value of the second element present in the array.\n\n**Parameters**\n\n-   `previousValue` **Any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n-   `currentCoord` **[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)&lt;[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)>** The current coordinate being processed.\n-   `coordIndex` **[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)** The current index of the coordinate being processed.\n    Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n-   `featureIndex` **[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)** The current index of the feature being processed.\n-   `featureSubIndex` **[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)** The current subIndex of the feature being processed.\n-   `geojson`  \n-   `callback`  \n-   `initialValue`  \n-   `excludeWrapCoord`  \n\n# propEach\n\nIterate over properties in any GeoJSON object, similar to Array.forEach()\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection](http://geojson.org/geojson-spec.html#feature-collection-objects) \\| [Feature](http://geojson.org/geojson-spec.html#feature-objects))** any GeoJSON object\n-   `callback` **[Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function)** a method that takes (currentProperties, featureIndex)\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.propEach(features, function (currentProperties, featureIndex) {\n  //=currentProperties\n  //=featureIndex\n});\n```\n\n# propEachCallback\n\nCallback for propEach\n\n**Parameters**\n\n-   `currentProperties` **[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)** The current properties being processed.\n-   `featureIndex` **[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)** The index of the current element being processed in the\n    array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n-   `geojson`  \n-   `callback`  \n\n# propReduce\n\nReduce properties in any GeoJSON object into a single value,\nsimilar to how Array.reduce works. However, in this case we lazily run\nthe reduction, so an array of all properties is unnecessary.\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection](http://geojson.org/geojson-spec.html#feature-collection-objects) \\| [Feature](http://geojson.org/geojson-spec.html#feature-objects))** any GeoJSON object\n-   `callback` **[Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function)** a method that takes (previousValue, currentProperties, featureIndex)\n-   `initialValue` **\\[Any]** Value to use as the first argument to the first call of the callback.\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n  //=previousValue\n  //=currentProperties\n  //=featureIndex\n  return currentProperties\n});\n```\n\nReturns **Any** The value that results from the reduction.\n\n# propReduceCallback\n\nCallback for propReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n-   The previousValue argument is initialValue.\n-   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n-   The previousValue argument is the value of the first element present in the array.\n-   The currentValue argument is the value of the second element present in the array.\n\n**Parameters**\n\n-   `previousValue` **Any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n-   `currentProperties` **Any** The current properties being processed.\n-   `featureIndex` **[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)** The index of the current element being processed in the\n    array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n-   `geojson`  \n-   `callback`  \n-   `initialValue`  \n\n# featureEach\n\nIterate over features in any GeoJSON object, similar to\nArray.forEach.\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection](http://geojson.org/geojson-spec.html#feature-collection-objects) \\| [Feature](http://geojson.org/geojson-spec.html#feature-objects) \\| [Geometry](http://geojson.org/geojson-spec.html#geometry))** any GeoJSON object\n-   `callback` **[Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function)** a method that takes (currentFeature, featureIndex)\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {foo: 'bar'}),\n  turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.featureEach(features, function (currentFeature, featureIndex) {\n  //=currentFeature\n  //=featureIndex\n});\n```\n\n# featureEachCallback\n\nCallback for featureEach\n\n**Parameters**\n\n-   `currentFeature` **[Feature](http://geojson.org/geojson-spec.html#feature-objects)&lt;any>** The current feature being processed.\n-   `featureIndex` **[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)** The index of the current element being processed in the\n    array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n-   `geojson`  \n-   `callback`  \n\n# featureReduceCallback\n\nCallback for featureReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n-   The previousValue argument is initialValue.\n-   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n-   The previousValue argument is the value of the first element present in the array.\n-   The currentValue argument is the value of the second element present in the array.\n\n**Parameters**\n\n-   `previousValue` **Any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n-   `currentFeature` **[Feature](http://geojson.org/geojson-spec.html#feature-objects)** The current Feature being processed.\n-   `featureIndex` **[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)** The index of the current element being processed in the\n    array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n-   `geojson`  \n-   `callback`  \n-   `initialValue`  \n\n# featureReduce\n\nReduce features in any GeoJSON object, similar to Array.reduce().\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection](http://geojson.org/geojson-spec.html#feature-collection-objects) \\| [Feature](http://geojson.org/geojson-spec.html#feature-objects) \\| [Geometry](http://geojson.org/geojson-spec.html#geometry))** any GeoJSON object\n-   `callback` **[Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function)** a method that takes (previousValue, currentFeature, featureIndex)\n-   `initialValue` **\\[Any]** Value to use as the first argument to the first call of the callback.\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {\"foo\": \"bar\"}),\n  turf.point([36, 53], {\"hello\": \"world\"})\n]);\n\nturf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n  //=previousValue\n  //=currentFeature\n  //=featureIndex\n  return currentFeature\n});\n```\n\nReturns **Any** The value that results from the reduction.\n\n# coordAll\n\nGet all coordinates from any GeoJSON object.\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection](http://geojson.org/geojson-spec.html#feature-collection-objects) \\| [Feature](http://geojson.org/geojson-spec.html#feature-objects) \\| [Geometry](http://geojson.org/geojson-spec.html#geometry))** any GeoJSON object\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {foo: 'bar'}),\n  turf.point([36, 53], {hello: 'world'})\n]);\n\nvar coords = turf.coordAll(features);\n//= [[26, 37], [36, 53]]\n```\n\nReturns **[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)&lt;[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)&lt;[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)>>** coordinate position array\n\n# geomEachCallback\n\nCallback for geomEach\n\n**Parameters**\n\n-   `currentGeometry` **[Geometry](http://geojson.org/geojson-spec.html#geometry)** The current geometry being processed.\n-   `currentIndex` **[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)** The index of the current element being processed in the\n    array. Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n-   `currentProperties` **[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)** The current feature properties being processed.\n-   `geojson`  \n-   `callback`  \n\n# geomEach\n\nIterate over each geometry in any GeoJSON object, similar to Array.forEach()\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection](http://geojson.org/geojson-spec.html#feature-collection-objects) \\| [Feature](http://geojson.org/geojson-spec.html#feature-objects) \\| [Geometry](http://geojson.org/geojson-spec.html#geometry))** any GeoJSON object\n-   `callback` **[Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function)** a method that takes (currentGeometry, featureIndex, currentProperties)\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.geomEach(features, function (currentGeometry, featureIndex, currentProperties) {\n  //=currentGeometry\n  //=featureIndex\n  //=currentProperties\n});\n```\n\n# geomReduceCallback\n\nCallback for geomReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n-   The previousValue argument is initialValue.\n-   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n-   The previousValue argument is the value of the first element present in the array.\n-   The currentValue argument is the value of the second element present in the array.\n\n**Parameters**\n\n-   `previousValue` **Any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n-   `currentGeometry` **[Geometry](http://geojson.org/geojson-spec.html#geometry)** The current Feature being processed.\n-   `currentIndex` **[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)** The index of the current element being processed in the\n    array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n-   `currentProperties` **[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)** The current feature properties being processed.\n-   `geojson`  \n-   `callback`  \n-   `initialValue`  \n\n# geomReduce\n\nReduce geometry in any GeoJSON object, similar to Array.reduce().\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection](http://geojson.org/geojson-spec.html#feature-collection-objects) \\| [Feature](http://geojson.org/geojson-spec.html#feature-objects) \\| [Geometry](http://geojson.org/geojson-spec.html#geometry))** any GeoJSON object\n-   `callback` **[Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function)** a method that takes (previousValue, currentGeometry, featureIndex, currentProperties)\n-   `initialValue` **\\[Any]** Value to use as the first argument to the first call of the callback.\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, currentProperties) {\n  //=previousValue\n  //=currentGeometry\n  //=featureIndex\n  //=currentProperties\n  return currentGeometry\n});\n```\n\nReturns **Any** The value that results from the reduction.\n\n# flattenEachCallback\n\nCallback for flattenEach\n\n**Parameters**\n\n-   `currentFeature` **[Feature](http://geojson.org/geojson-spec.html#feature-objects)** The current flattened feature being processed.\n-   `featureIndex` **[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)** The index of the current element being processed in the\n    array. Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n-   `featureSubIndex` **[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)** The subindex of the current element being processed in the\n    array. Starts at index 0 and increases if the flattened feature was a multi-geometry.\n-   `geojson`  \n-   `callback`  \n\n# flattenEach\n\nIterate over flattened features in any GeoJSON object, similar to\nArray.forEach.\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection](http://geojson.org/geojson-spec.html#feature-collection-objects) \\| [Feature](http://geojson.org/geojson-spec.html#feature-objects) \\| [Geometry](http://geojson.org/geojson-spec.html#geometry))** any GeoJSON object\n-   `callback` **[Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function)** a method that takes (currentFeature, featureIndex, featureSubIndex)\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n]);\n\nturf.flattenEach(features, function (currentFeature, featureIndex, featureSubIndex) {\n  //=currentFeature\n  //=featureIndex\n  //=featureSubIndex\n});\n```\n\n# flattenReduceCallback\n\nCallback for flattenReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n-   The previousValue argument is initialValue.\n-   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n-   The previousValue argument is the value of the first element present in the array.\n-   The currentValue argument is the value of the second element present in the array.\n\n**Parameters**\n\n-   `previousValue` **Any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n-   `currentFeature` **[Feature](http://geojson.org/geojson-spec.html#feature-objects)** The current Feature being processed.\n-   `featureIndex` **[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)** The index of the current element being processed in the\n    array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n-   `featureSubIndex` **[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)** The subindex of the current element being processed in the\n    array. Starts at index 0 and increases if the flattened feature was a multi-geometry.\n-   `geojson`  \n-   `callback`  \n-   `initialValue`  \n\n# flattenReduce\n\nReduce flattened features in any GeoJSON object, similar to Array.reduce().\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection](http://geojson.org/geojson-spec.html#feature-collection-objects) \\| [Feature](http://geojson.org/geojson-spec.html#feature-objects) \\| [Geometry](http://geojson.org/geojson-spec.html#geometry))** any GeoJSON object\n-   `callback` **[Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function)** a method that takes (previousValue, currentFeature, featureIndex, featureSubIndex)\n-   `initialValue` **\\[Any]** Value to use as the first argument to the first call of the callback.\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n]);\n\nturf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, featureSubIndex) {\n  //=previousValue\n  //=currentFeature\n  //=featureIndex\n  //=featureSubIndex\n  return currentFeature\n});\n```\n\nReturns **Any** The value that results from the reduction.\n\n# segmentEachCallback\n\nCallback for segmentEach\n\n**Parameters**\n\n-   `currentSegment` **[Feature](http://geojson.org/geojson-spec.html#feature-objects)&lt;[LineString](http://geojson.org/geojson-spec.html#linestring)>** The current segment being processed.\n-   `segmentIndex` **[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)** The segmentIndex currently being processed, starts at index 0.\n-   `featureIndex` **[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)** The featureIndex currently being processed, starts at index 0.\n-   `featureSubIndex` **[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)** The featureSubIndex currently being processed, starts at index 0.\n-   `geojson`  \n-   `callback`  \n\nReturns **void** \n\n# segmentEach\n\nIterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n(Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection](http://geojson.org/geojson-spec.html#feature-collection-objects) \\| [Feature](http://geojson.org/geojson-spec.html#feature-objects) \\| [Geometry](http://geojson.org/geojson-spec.html#geometry))** any GeoJSON\n-   `callback` **[Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function)** a method that takes (currentSegment, featureIndex, featureSubIndex)\n\n**Examples**\n\n```javascript\nvar polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n\n// Iterate over GeoJSON by 2-vertex segments\nturf.segmentEach(polygon, function (currentSegment, featureIndex, featureSubIndex) {\n  //= currentSegment\n  //= segmentIndex\n  //= featureIndex\n  //= featureSubIndex\n});\n\n// Calculate the total number of segments\nvar total = 0;\nturf.segmentEach(polygon, function () {\n    total++;\n});\n```\n\nReturns **void** \n\n# segmentReduceCallback\n\nCallback for segmentReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n-   The previousValue argument is initialValue.\n-   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n-   The previousValue argument is the value of the first element present in the array.\n-   The currentValue argument is the value of the second element present in the array.\n\n**Parameters**\n\n-   `previousValue` **\\[Any]** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n-   `currentSegment` **\\[[Feature](http://geojson.org/geojson-spec.html#feature-objects)&lt;[LineString](http://geojson.org/geojson-spec.html#linestring)>]** The current segment being processed.\n-   `segmentIndex` **[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)** The segmentIndex currently being processed, starts at index 0.\n-   `featureIndex` **[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)** The featureIndex currently being processed, starts at index 0.\n-   `featureSubIndex` **[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)** The featureSubIndex currently being processed, starts at index 0.\n-   `geojson`  \n-   `callback`  \n-   `initialValue`  \n\n# segmentReduce\n\nReduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n(Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection](http://geojson.org/geojson-spec.html#feature-collection-objects) \\| [Feature](http://geojson.org/geojson-spec.html#feature-objects) \\| [Geometry](http://geojson.org/geojson-spec.html#geometry))** any GeoJSON\n-   `callback` **[Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function)** a method that takes (previousValue, currentSegment, currentIndex)\n-   `initialValue` **\\[Any]** Value to use as the first argument to the first call of the callback.\n\n**Examples**\n\n```javascript\nvar polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n\n// Iterate over GeoJSON by 2-vertex segments\nturf.segmentReduce(polygon, function (previousSegment, currentSegment, segmentIndex, featureIndex, featureSubIndex) {\n  //= previousSegment\n  //= currentSegment\n  //= segmentInex\n  //= featureIndex\n  //= featureSubIndex\n  return currentSegment\n});\n\n// Calculate the total number of segments\nvar initialValue = 0\nvar total = turf.segmentReduce(polygon, function (previousValue) {\n    previousValue++;\n    return previousValue;\n}, initialValue);\n```\n\nReturns **void** \n\n# lineEachCallback\n\nCallback for lineEach\n\n**Parameters**\n\n-   `currentLine` **[Feature](http://geojson.org/geojson-spec.html#feature-objects)&lt;[LineString](http://geojson.org/geojson-spec.html#linestring)>** The current LineString|LinearRing being processed.\n-   `lineIndex` **[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)** The index of the current element being processed in the array, starts at index 0.\n-   `lineSubIndex` **[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)** The sub-index of the current line being processed at index 0\n-   `geojson`  \n-   `callback`  \n\n# lineEach\n\nIterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,\nsimilar to Array.forEach.\n\n**Parameters**\n\n-   `geojson` **([Geometry](http://geojson.org/geojson-spec.html#geometry) \\| [Feature](http://geojson.org/geojson-spec.html#feature-objects)&lt;([LineString](http://geojson.org/geojson-spec.html#linestring) \\| [Polygon](http://geojson.org/geojson-spec.html#polygon) \\| [MultiLineString](http://geojson.org/geojson-spec.html#multilinestring) \\| [MultiPolygon](http://geojson.org/geojson-spec.html#multipolygon))>)** object\n-   `callback` **[Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function)** a method that takes (currentLine, lineIndex, lineSubIndex)\n\n**Examples**\n\n```javascript\nvar mtLn = turf.multiLineString([\n  turf.lineString([[26, 37], [35, 45]]),\n  turf.lineString([[36, 53], [38, 50], [41, 55]])\n]);\n\nturf.lineEach(mtLn, function (currentLine, lineIndex) {\n  //=currentLine\n  //=lineIndex\n});\n```\n\n# lineReduceCallback\n\nCallback for lineReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n-   The previousValue argument is initialValue.\n-   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n-   The previousValue argument is the value of the first element present in the array.\n-   The currentValue argument is the value of the second element present in the array.\n\n**Parameters**\n\n-   `previousValue` **Any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n-   `currentLine` **[Feature](http://geojson.org/geojson-spec.html#feature-objects)&lt;[LineString](http://geojson.org/geojson-spec.html#linestring)>** The current LineString|LinearRing being processed.\n-   `lineIndex` **[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)** The index of the current element being processed in the\n    array. Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n-   `lineSubIndex` **[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)** The sub-index of the current line being processed at index 0\n-   `geojson`  \n-   `callback`  \n-   `initialValue`  \n\n# lineReduce\n\nReduce features in any GeoJSON object, similar to Array.reduce().\n\n**Parameters**\n\n-   `geojson` **([Geometry](http://geojson.org/geojson-spec.html#geometry) \\| [Feature](http://geojson.org/geojson-spec.html#feature-objects)&lt;([LineString](http://geojson.org/geojson-spec.html#linestring) \\| [Polygon](http://geojson.org/geojson-spec.html#polygon) \\| [MultiLineString](http://geojson.org/geojson-spec.html#multilinestring) \\| [MultiPolygon](http://geojson.org/geojson-spec.html#multipolygon))>)** object\n-   `callback` **[Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function)** a method that takes (previousValue, currentFeature, featureIndex)\n-   `initialValue` **\\[Any]** Value to use as the first argument to the first call of the callback.\n\n**Examples**\n\n```javascript\nvar mtp = turf.multiPolygon([\n  turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),\n  turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])\n]);\n\nturf.lineReduce(mtp, function (previousValue, currentLine, lineIndex, lineSubIndex) {\n  //=previousValue\n  //=currentLine\n  //=lineIndex\n  //=lineSubIndex\n  return currentLine\n}, 2);\n```\n\nReturns **Any** The value that results from the reduction.\n\n<!-- This file is automatically generated. Please don't edit it directly:\nif you find an error, edit the source file (likely index.js), and re-run\n./scripts/generate-readmes in the turf project. -->\n\n---\n\nThis module is part of the [Turfjs project](http://turfjs.org/), an open source\nmodule collection dedicated to geographic algorithms. It is maintained in the\n[Turfjs/turf](https://github.com/Turfjs/turf) repository, where you can create\nPRs and issues.\n\n### Installation\n\nInstall this module individually:\n\n```sh\n$ npm install @turf/meta\n```\n\nOr install the Turf module that includes it as a function:\n\n```sh\n$ npm install @turf/turf\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/Turfjs/turf.git"
  },
  "scripts": {
    "bench": "node bench.js",
    "pretest": "rollup -c ../../rollup.config.js",
    "test": "node test.es5.js"
  },
  "types": "index.d.ts",
  "version": "4.7.4"
}
