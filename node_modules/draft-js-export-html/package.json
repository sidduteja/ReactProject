{
  "_args": [
    [
      {
        "raw": "draft-js-export-html@>=0.6.0",
        "scope": null,
        "escapedName": "draft-js-export-html",
        "name": "draft-js-export-html",
        "rawSpec": ">=0.6.0",
        "spec": ">=0.6.0",
        "type": "range"
      },
      "/home/devrabbit/Desktop/ReactProject/node_modules/react-rte"
    ]
  ],
  "_from": "draft-js-export-html@>=0.6.0",
  "_id": "draft-js-export-html@1.2.0",
  "_inCache": true,
  "_location": "/draft-js-export-html",
  "_nodeVersion": "8.5.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/draft-js-export-html-1.2.0.tgz_1505781596006_0.1602621441707015"
  },
  "_npmUser": {
    "name": "sstur",
    "email": "sstur@me.com"
  },
  "_npmVersion": "4.6.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "draft-js-export-html@>=0.6.0",
    "scope": null,
    "escapedName": "draft-js-export-html",
    "name": "draft-js-export-html",
    "rawSpec": ">=0.6.0",
    "spec": ">=0.6.0",
    "type": "range"
  },
  "_requiredBy": [
    "/react-rte"
  ],
  "_resolved": "https://registry.npmjs.org/draft-js-export-html/-/draft-js-export-html-1.2.0.tgz",
  "_shasum": "1cbe2b78e1fed74fc29c7cdcbfd7540468eca209",
  "_shrinkwrap": null,
  "_spec": "draft-js-export-html@>=0.6.0",
  "_where": "/home/devrabbit/Desktop/ReactProject/node_modules/react-rte",
  "author": {
    "name": "sstur@me.com"
  },
  "bugs": {
    "url": "https://github.com/sstur/draft-js-utils/issues"
  },
  "dependencies": {
    "draft-js-utils": "^1.2.0"
  },
  "description": "DraftJS: Export ContentState to HTML",
  "devDependencies": {
    "@types/draft-js": "^0.7.33"
  },
  "directories": {},
  "dist": {
    "shasum": "1cbe2b78e1fed74fc29c7cdcbfd7540468eca209",
    "tarball": "https://registry.npmjs.org/draft-js-export-html/-/draft-js-export-html-1.2.0.tgz"
  },
  "homepage": "https://github.com/sstur/draft-js-utils/blob/master/packages/draft-js-export-html/README.md",
  "keywords": [
    "draft-js",
    "export-html"
  ],
  "license": "ISC",
  "main": "lib/main.js",
  "maintainers": [
    {
      "name": "kodefox",
      "email": "devteam@kodefox.com"
    },
    {
      "name": "sstur",
      "email": "sstur@me.com"
    }
  ],
  "name": "draft-js-export-html",
  "optionalDependencies": {},
  "peerDependencies": {
    "draft-js": ">=0.10.0",
    "immutable": "3.x.x"
  },
  "readme": "# DraftJS: Export ContentState to HTML\n\nThis is a module for [DraftJS](https://github.com/facebook/draft-js) that will export your editor content to semantic HTML.\n\nIt was extracted from [React-RTE](https://react-rte.org) and placed into a separate module for more general use. Hopefully it can be helpful in your projects.\n\n## Installation\n\n    npm install --save draft-js-export-html\n\n## How to Use\n\n```javascript\nimport {stateToHTML} from 'draft-js-export-html';\nlet html = stateToHTML(contentState);\n```\n\n## Options\n\nYou can optionally pass a second \"options\" argument to `stateToHTML` which should be an object with one or more of the following properties:\n\n### `inlineStyles`\n\nYou can define rendering options for inline styles. This applies to built-in inline styles (e.g. `BOLD`) or your own custom inline styles (e.g. `RED`). You can specify which element/tag name will be used (e.g. use `<b>` instead of `<strong>` for `BOLD`). You can add custom attributes (e.g. `class=\"foo\"`) or add some styling (e.g. `color: red`).\n\nExample:\n\n```javascript\nlet options = {\n  inlineStyles: {\n    // Override default element (`strong`).\n    BOLD: {element: 'b'},\n    ITALIC: {\n      // Add custom attributes. You can also use React-style `className`.\n      attributes: {class: 'foo'},\n      // Use camel-case. Units (`px`) will be added where necessary.\n      style: {fontSize: 12}\n    },\n    // Use a custom inline style. Default element is `span`.\n    RED: {style: {color: '#900'}},\n  },\n};\nlet html = stateToHTML(contentState, options);\n```\n\n### `blockRenderers`\n\nYou can define a custom renderer for any block type. Pass a function that accepts `block` as an argument. You can return a string to render this block yourself, or return nothing (null or undefined) to defer to the default renderer.\n\nExample:\n\n```javascript\nlet options = {\n  blockRenderers: {\n    atomic: (block) => {\n      let data = block.getData();\n      if (data.get('foo') === 'bar') {\n        return '<div>' + escape(block.getText()) + '</div>';\n      }\n    },\n  },\n};\nlet html = stateToHTML(contentState, options);\n```\n\n### `defaultBlockTag`\n\nIf you don't want to define the full custom render for a block, you can define the type of the parent block tag that will be created if the block type doesn't match any known type.\n\nIf you don't want any parent block tag, you can set `defaultBlockTag` to `null`.\n\nExample:\n\n```javascript\nlet options = {\n  defaultBlockTag: 'div',\n};\nlet html = stateToHTML(contentState, options);\n```\n\n### `blockStyleFn`\n\nYou can define custom styles and attributes for your block, utilizing the underlying built-in rendering logic of the tags, but adding your own attributes or styles on top. The `blockStyleFn` option takes a block and returns an Object similar to `inlineStyles` of the following signature or null:\n\n```js\n{\n  attributes: {}\n  style: {}\n}\n```\n\nExample:\n```js\nlet options = {\n  blockStyleFn(block) => {\n    if (block.getData().get('color')) {\n      return {\n        style: {\n          color: block.getData().get('color')\n        }\n      }\n    }\n  }\n}\nlet html = stateToHTML(contentState, options);\n```\n\n### `entityStyleFn`\n\nIt is passed an [`entity`](https://draftjs.org/docs/api-reference-entity.html) object\nand should return an entityStyle object in the shape of:\n\n```js\n{\n  element: 'element', // name of DOM element as a string\n  attributes: {},\n  style: {}\n}\n```\n\nExample:\n\n```js\nlet options = {\n  entityStyleFn: (entity) => {\n    const entityType = entity.get('type').toLowerCase();\n    if (entityType === 'image') {\n      const data = entity.getData();\n      return {\n        element: 'img',\n        attributes: {\n          src: data.src,\n        },\n        style: {\n          // Put styles here...\n        },\n      };\n    }\n  },\n};\nlet html = stateToHTML(contentState, options);\n```\n\n## Contributing\n\nIf you want to help out, please open an issue to discuss or join us on [Slack](https://draftjs.herokuapp.com/).\n\n## License\n\nThis software is [BSD Licensed](/LICENSE).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "https://github.com/sstur/draft-js-utils/tree/master/packages/draft-js-export-html"
  },
  "scripts": {
    "build": "babel src --out-dir lib --ignore \"_*\"",
    "watch": "babel src --watch --out-dir lib --ignore \"_*\""
  },
  "typings": "typings/index.d.ts",
  "version": "1.2.0"
}
