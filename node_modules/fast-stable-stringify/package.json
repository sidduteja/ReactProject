{
  "_args": [
    [
      {
        "raw": "fast-stable-stringify@^0.1.1",
        "scope": null,
        "escapedName": "fast-stable-stringify",
        "name": "fast-stable-stringify",
        "rawSpec": "^0.1.1",
        "spec": ">=0.1.1 <0.2.0",
        "type": "range"
      },
      "/home/devrabbit/Desktop/ReactProject/node_modules/mapbox-gl"
    ]
  ],
  "_from": "fast-stable-stringify@>=0.1.1 <0.2.0",
  "_id": "fast-stable-stringify@0.1.1",
  "_inCache": true,
  "_location": "/fast-stable-stringify",
  "_nodeVersion": "0.12.2",
  "_npmUser": {
    "name": "nickyout",
    "email": "nickyout@gmail.com"
  },
  "_npmVersion": "2.9.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "fast-stable-stringify@^0.1.1",
    "scope": null,
    "escapedName": "fast-stable-stringify",
    "name": "fast-stable-stringify",
    "rawSpec": "^0.1.1",
    "spec": ">=0.1.1 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/mapbox-gl"
  ],
  "_resolved": "https://registry.npmjs.org/fast-stable-stringify/-/fast-stable-stringify-0.1.1.tgz",
  "_shasum": "ce758dce1cb40fb2bf0c8aef4f93e792d195b491",
  "_shrinkwrap": null,
  "_spec": "fast-stable-stringify@^0.1.1",
  "_where": "/home/devrabbit/Desktop/ReactProject/node_modules/mapbox-gl",
  "author": {
    "name": "Nicky Out"
  },
  "bugs": {
    "url": "https://github.com/nickyout/fast-stable-stringify/issues"
  },
  "dependencies": {},
  "description": "Deterministic stringification for when performance matters",
  "devDependencies": {
    "benchmark": "^1.0.0",
    "devnull": "0.0.12",
    "json-stable-stringify": "^1.0.0",
    "mocha": "^2.2.5"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "ce758dce1cb40fb2bf0c8aef4f93e792d195b491",
    "tarball": "https://registry.npmjs.org/fast-stable-stringify/-/fast-stable-stringify-0.1.1.tgz"
  },
  "gitHead": "0b992ce1ffdc300a7831ac5fffb2973660f04db8",
  "homepage": "https://github.com/nickyout/fast-stable-stringify#readme",
  "keywords": [
    "JSON",
    "stable",
    "deterministic",
    "stringify",
    "fast"
  ],
  "license": "GPL-3.0",
  "main": "index.js",
  "maintainers": [
    {
      "name": "nickyout",
      "email": "nickyout@gmail.com"
    }
  ],
  "name": "fast-stable-stringify",
  "optionalDependencies": {},
  "readme": "# fast-stable-stringify\n\n[![Build Status](https://travis-ci.org/nickyout/fast-stable-stringify.svg?branch=master)](https://travis-ci.org/nickyout/fast-stable-stringify)\n[![Sauce Test Status](https://saucelabs.com/browser-matrix/nickyout_fast-stable.svg)](https://saucelabs.com/u/nickyout_fast-stable)\n\n_Android 4.0 is marked failing because it is slower than substack's, not because it does not work. Click on the badge(s) to inspect the test details._\n\nThe most popular repository providing this feature is [substack's json-stable-stringify][sub]. The intent if this library is to provide a faster alternative for when performance is more important than features. It assumes you provide basic javascript values without circular references, and returns a non-indented string. It currently offers a performance boost in popular browsers of about 50%.  \n\nUsage:\n\n```javascript\nvar stringify = require('fast-stable-stringify');\nstringify({ d: 0, c: 1, a: 2, b: 3, e: 4 }); // '{\"a\":2,\"b\":3,\"c\":1,\"d\":0,\"e\":4}'\n```\n\nJust like substack's, it does:\n\n*   handle all variations of all basic javascript values (number, string, boolean, array, object, null)\n*   handle undefined in the same way as `JSON.stringify`\n*\twork without native access to `JSON.stringify`\n*   **not support ie8 (and below) with complete certainty**. At least, his build failed on ie8.\n\nUnlike substack's, it does:\n\n*   not implement the 'replacer' or 'space' arguments of the JSON.stringify method\n*   not check for circular references\n*   not check for .toJSON() methods on objects\n\n## Test results\nTested validity (answer equal to substack's) and benchmark (faster than substack's). A test passes only if it has the same output as substack's but is faster (as concluded by [benchmark.js][ben]). \n\nTo (hopefully) prevent [certain smart browsers][cat] from concluding the stringification is not necessary because it is never used anywhere, I summed up all the lengths of the resulting strings of each benchmark contestant and printed it along with the result data. \n\n### Latest (interpreted) result\n\nBenchmark commit e0176c7\t|nickyout/fast-stable-stringify\t|substack/json-stable-stringify\t|last time*\t|fastest*\n----------------------------|-------------------------------|-------------------------------|-----------|----------\nchrome 26 on Windows 10\t\t| x 2,848 ops/sec\t\t\t\t| x 2,277 ops/sec\t\t\t\t|+47%\t\t|+25%\nchrome 44 on Windows 10\t\t| x 5,573 ops/sec \t\t\t\t| x 3,719 ops/sec\t\t\t\t|+41%**\t\t|+50%\ninternet explorer 9 on Windows 2008\t| x 5,185 ops/sec \t\t| x 2,633 ops/sec\t\t\t\t|+98%\t\t|+97%\ninternet explorer 10 on Windows 2012\t| x 5,999 ops/sec \t| x 2,736 ops/sec\t\t\t\t|+83%\t\t|+119%\ninternet explorer 11 on Windows 10\t| x 5,419 ops/sec \t\t| x 4,055 ops/sec\t\t\t\t|+31%\t\t|+34%\nsafari 5 on Windows 2008\t| x 3,678 ops/sec\t\t\t\t| x 1,405 ops/sec\t\t\t\t|+144%\t\t|+162%\nsafari 8.1 on Mac 10.11\t\t| x 2,191 ops/sec \t\t\t\t| x 1,199 ops/sec\t\t\t\t|+167%**\t|+83%\nfirefox 20 on Windows 10\t| x 4,253 ops/sec\t\t\t\t| x 2,046 ops/sec\t\t\t\t|+122%\t\t|+108%\nfirefox 39 on Windows 10\t| x 3,384 ops/sec\t\t\t\t| x 2,091 ops/sec\t\t\t\t|+55%\t\t|+62%\nopera 11 on Windows 2003\t| x 453 ops/sec \t\t\t\t| x 339 ops/sec\t\t\t\t\t|+27%\t\t|+34%\nopera 12 on Windows 2003\t| x 2,768 ops/sec\t\t\t\t| x 1,664 ops/sec\t\t\t\t|+60%\t\t|+66%\nipad 8.4 on Mac 10.10\t\t| x 8,978 ops/sec\t\t\t\t| x 3,991 ops/sec\t\t\t\t|+15%**\t\t|+125%\niphone 8.4 on Mac 10.10\t\t| x 7,252 ops/sec\t\t\t\t| x 2,935 ops/sec\t\t\t\t|+159%**\t|+147%\nandroid 4.0 on Linux\t\t| x 5,949 ops/sec\t\t\t\t| x 6,092 ops/sec\t\t\t\t|-2%\t\t|-2%\nandroid 5.1 on Linux\t\t| x 5,488 ops/sec\t\t\t\t| x 2,809 ops/sec\t\t\t\t|+40%\t\t|+95%\n\n\\* I did (nickyout / substack) - 1 in percentages\n\\**\tDifferent 'latest version'\n\\*** Earliest ipad and iphone were unavailable because Sauce deprecated them. Adding for next run.\n\nArguably faster than last time, but more importantly, most latest versions of the most popular browsers get a bump in speed. I'll call that a win. \n\nSee [caniuse browser usage][usg] for the 'most popular browsers'.\n\nClick the build status badge to view the original output.\n\n## Also\nIt exposes the way strings are escaped for JSON:\n\n```javascript\nvar stringify = require('./'),\n\tstringSearch = stringify.stringSearch,\n\tstringReplace = stringify.stringReplace,\n\tstr = \"ay\\nb0ss\";\nstr.replace(stringSearch, stringReplace); // 'ay\\\\nb0ss'\n```\n\nIt does NOT add the quotes before and after the string needed for JSON.stringify-ing strings. Fortunately, that isn't hard:\n\n```javascript\n'\"' + str.replace(stringSearch, stringReplace) + '\"'; // '\"ay\\\\nb0ss\"'\n```\n\n## Running tests\nFor testing in node, do:\n\n```\nnpm test\n```\n\nI used [zuul][zul] for testing on saucelabs. It's a very easy to use tool, but because their library is about 150MB I did not include it in the devDepencencies. I suggest installing it globally if you want to test:\n\n```\n# install zuul\nnpm install -g zuul\n# then, to run all tests\nzuul -- test/index.js\n ```\n \n## TODO\n\n*\tTest more unicode chars\n\n[sub]: https://github.com/substack/json-stable-stringify\n[ben]: https://github.com/bestiejs/benchmark.js\n[cat]: http://mrale.ph/blog/2014/02/23/the-black-cat-of-microbenchmarks.html\n[usg]: http://caniuse.com/usage-table\n[zul]: https://github.com/defunctzombie/zuul",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/nickyout/fast-stable-stringify.git"
  },
  "scripts": {
    "test": "node ./node_modules/.bin/mocha --ui tdd test/index",
    "test-browsers": "zuul -- test/index.js"
  },
  "version": "0.1.1"
}
