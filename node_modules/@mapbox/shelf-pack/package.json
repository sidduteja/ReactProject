{
  "_args": [
    [
      {
        "raw": "@mapbox/shelf-pack@^3.0.0",
        "scope": "@mapbox",
        "escapedName": "@mapbox%2fshelf-pack",
        "name": "@mapbox/shelf-pack",
        "rawSpec": "^3.0.0",
        "spec": ">=3.0.0 <4.0.0",
        "type": "range"
      },
      "/home/devrabbit/Desktop/ReactProject/node_modules/mapbox-gl"
    ]
  ],
  "_from": "@mapbox/shelf-pack@>=3.0.0 <4.0.0",
  "_id": "@mapbox/shelf-pack@3.1.0",
  "_inCache": true,
  "_location": "/@mapbox/shelf-pack",
  "_nodeVersion": "6.7.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/shelf-pack-3.1.0.tgz_1503637672176_0.6718796011991799"
  },
  "_npmUser": {
    "name": "bhousel",
    "email": "bryan@mapbox.com"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@mapbox/shelf-pack@^3.0.0",
    "scope": "@mapbox",
    "escapedName": "@mapbox%2fshelf-pack",
    "name": "@mapbox/shelf-pack",
    "rawSpec": "^3.0.0",
    "spec": ">=3.0.0 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/mapbox-gl"
  ],
  "_resolved": "https://registry.npmjs.org/@mapbox/shelf-pack/-/shelf-pack-3.1.0.tgz",
  "_shasum": "1edea9c0bf6715b217171ba60646c201af520f6a",
  "_shrinkwrap": null,
  "_spec": "@mapbox/shelf-pack@^3.0.0",
  "_where": "/home/devrabbit/Desktop/ReactProject/node_modules/mapbox-gl",
  "author": {
    "name": "Bryan Housel",
    "email": "bryan@mapbox.com"
  },
  "bugs": {
    "url": "https://github.com/mapbox/shelf-pack/issues"
  },
  "dependencies": {},
  "description": "A 2D rectangular bin packing data structure that uses the Shelf Best Height Fit heuristic",
  "devDependencies": {
    "benchmark": "^2.1.0",
    "bin-pack": "1.0.2",
    "coveralls": "^2.11.12",
    "documentation": "4.0.0-beta5",
    "eslint": "^3.8.0",
    "rollup": "0.41.4",
    "tap": "^10.1.0"
  },
  "directories": {},
  "dist": {
    "shasum": "1edea9c0bf6715b217171ba60646c201af520f6a",
    "tarball": "https://registry.npmjs.org/@mapbox/shelf-pack/-/shelf-pack-3.1.0.tgz"
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "gitHead": "0df4c218bfef9ba059012e83a45f6418d566366c",
  "homepage": "https://github.com/mapbox/shelf-pack#readme",
  "jsnext:main": "index.js",
  "keywords": [
    "bin packing",
    "sprite"
  ],
  "license": "ISC",
  "main": "index.umd.js",
  "maintainers": [
    {
      "name": "d-prukop",
      "email": "dave.prukop@mapbox.com"
    },
    {
      "name": "lizziegooding",
      "email": "lizzie.gooding@mapbox.com"
    },
    {
      "name": "markmisener",
      "email": "mark.misener@mapbox.com"
    },
    {
      "name": "nickitaliano",
      "email": "nick.italiano@mapbox.com"
    },
    {
      "name": "taziam",
      "email": "tara.adiseshan@gmail.com"
    },
    {
      "name": "elifitch",
      "email": "eli.fitch.prof+npm@gmail.com"
    },
    {
      "name": "captainbarbosa-mbx",
      "email": "nadia.barbosa@mapbox.com"
    },
    {
      "name": "cammace",
      "email": "cameron@mapbox.com"
    },
    {
      "name": "brunoabinader",
      "email": "bruno@mapbox.com"
    },
    {
      "name": "langstonsmith",
      "email": "langston.smith@mapbox.com"
    },
    {
      "name": "geografa",
      "email": "rafa@mapbox.com"
    },
    {
      "name": "1ec5",
      "email": "mxn@1ec5.org"
    },
    {
      "name": "lshig",
      "email": "liz.shigetoshi@mapbox.com"
    },
    {
      "name": "johnfurrow",
      "email": "hello@johnfurrow.com"
    },
    {
      "name": "aaaandrea",
      "email": "andrea.delrio@mapbox.com"
    },
    {
      "name": "alianthes",
      "email": "ali@mapbox.com"
    },
    {
      "name": "millzpaugh",
      "email": "ann.millspaugh@gmail.com"
    },
    {
      "name": "franka",
      "email": "hello@franka.tech"
    },
    {
      "name": "charloyd",
      "email": "charlie@mapbox.com"
    },
    {
      "name": "juliannebg",
      "email": "julianne@mapbox.com"
    },
    {
      "name": "dthompson",
      "email": "dthompson@gmail.com"
    },
    {
      "name": "ericdeveloper",
      "email": "eric.alessandrini@mapbox.com"
    },
    {
      "name": "jayana",
      "email": "jayana.charles@mapbox.com"
    },
    {
      "name": "chriscx",
      "email": "christopher.cailleaux@gmail.com"
    },
    {
      "name": "poornibadrinath",
      "email": "poornima@mapbox.com"
    },
    {
      "name": "brsbl",
      "email": "bersabel.tadesse@mapbox.com"
    },
    {
      "name": "mal-wood",
      "email": "mallorywood413@gmail.com"
    },
    {
      "name": "luiswalter",
      "email": "luis@mapbox.com"
    },
    {
      "name": "piligab",
      "email": "pilar@mapbox.com"
    },
    {
      "name": "yurasi",
      "email": "galia@mapbox.com"
    },
    {
      "name": "matt.gosline",
      "email": "matt.gosline@mapbox.com"
    },
    {
      "name": "kellyoung",
      "email": "kelly.young@mapbox.com"
    },
    {
      "name": "zmully",
      "email": "mully@mapbox.com"
    },
    {
      "name": "mikelmaron",
      "email": "mikel@groundtruth.in"
    },
    {
      "name": "danpat",
      "email": "danpat@danpat.net"
    },
    {
      "name": "macro-shen",
      "email": "macro.shen@mapbox.com"
    },
    {
      "name": "asheemmamoowala",
      "email": "asheemm@gmail.com"
    },
    {
      "name": "jcsg",
      "email": "john.sylak-glassman@mapbox.com"
    },
    {
      "name": "michaelsteffen",
      "email": "michael@mapbox.com"
    },
    {
      "name": "ajashton",
      "email": "aj@mapbox.com"
    },
    {
      "name": "drboyer",
      "email": "devin.boyer@mapbox.com"
    },
    {
      "name": "andygol",
      "email": "andrey@mapbox.com"
    },
    {
      "name": "flippmoke",
      "email": "flippmoke@gmail.com"
    },
    {
      "name": "ilyasaf",
      "email": "safonov.ilya@gmail.com"
    },
    {
      "name": "deniskoronchik",
      "email": "denis.koronchik@gmail.com"
    },
    {
      "name": "peterqliu",
      "email": "peterqliu@gmail.com"
    },
    {
      "name": "rasagy",
      "email": "rasagy@mapbox.com"
    },
    {
      "name": "chetangowda",
      "email": "chethan@mapbox.com"
    },
    {
      "name": "upendrayadav",
      "email": "upendra@mapbox.com"
    },
    {
      "name": "calfarome",
      "email": "cesar@mapbox.com"
    },
    {
      "name": "ridixcr",
      "email": "pavel@mapbox.com"
    },
    {
      "name": "oliikit",
      "email": "olivia.brundage@mapbox.com"
    },
    {
      "name": "allierowan",
      "email": "aileen.s.rowan@gmail.com"
    },
    {
      "name": "richrico",
      "email": "richman@mapbox.com"
    },
    {
      "name": "dannykath",
      "email": "danny@mapbox.com"
    },
    {
      "name": "samely",
      "email": "eliane@mapbox.com"
    },
    {
      "name": "nikhilprabhakar",
      "email": "nikinfour@gmail.com"
    },
    {
      "name": "fa7c0n",
      "email": "gokul.ganesan@mapbox.com"
    },
    {
      "name": "boblannon",
      "email": "blannon@gmail.com"
    },
    {
      "name": "sgillies",
      "email": "sean@mapbox.com"
    },
    {
      "name": "lukasmartinelli",
      "email": "me@lukasmartinelli.ch"
    },
    {
      "name": "nammala",
      "email": "krishna@mapbox.com"
    },
    {
      "name": "lndsay",
      "email": "lindsay@mapbox.com"
    },
    {
      "name": "anandthakker",
      "email": "vestibule@anandthakker.net"
    },
    {
      "name": "chrisloer",
      "email": "chris.loer@mapbox.com"
    },
    {
      "name": "kepta",
      "email": "0o3ko0@gmail.com"
    },
    {
      "name": "kronick",
      "email": "sam.kronick@mapbox.com"
    },
    {
      "name": "manoharuss",
      "email": "manohar@mapbox.com"
    },
    {
      "name": "aparlato",
      "email": "alex.parlato@mapbox.com"
    },
    {
      "name": "yunjieli",
      "email": "yunjie.li@mapbox.com"
    },
    {
      "name": "bsrinivasa",
      "email": "bharata+npm@mapbox.com"
    },
    {
      "name": "aarthykc",
      "email": "aarthy@mapbox.com"
    },
    {
      "name": "springmeyer",
      "email": "dane@mapbox.com"
    },
    {
      "name": "dasulit",
      "email": "dana.sulit@mapbox.com"
    },
    {
      "name": "maning",
      "email": "emmanuel.sambale@gmail.com"
    },
    {
      "name": "miles-dev",
      "email": "miles.sackler@mapbox.com"
    },
    {
      "name": "mourner",
      "email": "agafonkin@gmail.com"
    },
    {
      "name": "chaupow",
      "email": "hello@chau-nguyen.de"
    },
    {
      "name": "oxidase",
      "email": "michael.krasnyk@gmail.com"
    },
    {
      "name": "rumc",
      "email": "r.ragupathy85@gmail.com"
    },
    {
      "name": "vincents",
      "email": "vincent.sarago@mapbox.com"
    },
    {
      "name": "tony-cj",
      "email": "tony.chen@mapbox.com"
    },
    {
      "name": "planemad",
      "email": "arun.planemad@gmail.com"
    },
    {
      "name": "themarex",
      "email": "patrick@mapbox.com"
    },
    {
      "name": "l-r",
      "email": "laurier@mapbox.com"
    },
    {
      "name": "aliceykuo",
      "email": "alice@mapbox.com"
    },
    {
      "name": "ansis",
      "email": "ansis.brammanis@gmail.com"
    },
    {
      "name": "oini",
      "email": "oindrila.gupta92@gmail.com"
    },
    {
      "name": "virginiayung",
      "email": "virginia@mapbox.com"
    },
    {
      "name": "karitotp",
      "email": "karito@mapbox.com"
    },
    {
      "name": "srividyacb",
      "email": "srividyabharadwaj26@gmail.com"
    },
    {
      "name": "perrygeo",
      "email": "perry@mapbox.com"
    },
    {
      "name": "colleenmcginnis",
      "email": "colleen.mcginnis@mapbox.com"
    },
    {
      "name": "natslaughter",
      "email": "nat@mapbox.com"
    },
    {
      "name": "nickcordella",
      "email": "nick.cordella@mapbox.com"
    },
    {
      "name": "benjamintd",
      "email": "benjamin@mapbox.com"
    },
    {
      "name": "enf",
      "email": "fischer@mapbox.com"
    },
    {
      "name": "kaibot3000",
      "email": "kai@mapbox.com"
    },
    {
      "name": "pdgoodman",
      "email": "paul@mapbox.com"
    },
    {
      "name": "msirenko",
      "email": "max@mapbox.com"
    },
    {
      "name": "saikia.abhishek",
      "email": "abhishek@mapbox.com"
    },
    {
      "name": "jothirnadh",
      "email": "jothirnadh@mapbox.com"
    },
    {
      "name": "ryan-baumann",
      "email": "ryan.baumann@mapbox.com"
    },
    {
      "name": "danswick",
      "email": "dan@mapbox.com"
    },
    {
      "name": "lily-chai",
      "email": "lily@mapbox.com"
    },
    {
      "name": "amishas157",
      "email": "amisha@mapbox.com"
    },
    {
      "name": "k-mahoney",
      "email": "kara.e.mahoney@gmail.com"
    },
    {
      "name": "bkowshik",
      "email": "bhargav.kowshik@gmail.com"
    },
    {
      "name": "alinapaz",
      "email": "alinapaz@gmail.com"
    },
    {
      "name": "dnomadb",
      "email": "damon@mapbox.com"
    },
    {
      "name": "lyzidiamond",
      "email": "lyzi@mapbox.com"
    },
    {
      "name": "freenerd",
      "email": "spam@freenerd.de"
    },
    {
      "name": "gretacb",
      "email": "carol@mapbox.com"
    },
    {
      "name": "mayaqgao",
      "email": "mayaqgao@gmail.com"
    },
    {
      "name": "camillacaros",
      "email": "camilla@mapbox.com"
    },
    {
      "name": "samanbb",
      "email": "saman@mapbox.com"
    },
    {
      "name": "bhousel",
      "email": "bryan@mapbox.com"
    },
    {
      "name": "danieljh",
      "email": "daniel+npm@trvx.org"
    },
    {
      "name": "katydecorah",
      "email": "decorah@mapbox.com"
    },
    {
      "name": "ajithranka",
      "email": "ajith@mapbox.com"
    },
    {
      "name": "pratikyadav",
      "email": "pratik@mapbox.com"
    },
    {
      "name": "morganherlocker",
      "email": "morgan.herlocker@gmail.com"
    },
    {
      "name": "jacquestardie",
      "email": "hi@jacquestardie.org"
    },
    {
      "name": "mollymerp",
      "email": "mollylloyd@gmail.com"
    },
    {
      "name": "jfirebaugh",
      "email": "john.firebaugh@gmail.com"
    },
    {
      "name": "tcql",
      "email": "tim.channell@gmail.com"
    },
    {
      "name": "rub21",
      "email": "ruben@mapbox.com"
    },
    {
      "name": "kkaefer",
      "email": "mail@kkaefer.com"
    },
    {
      "name": "brendanmcfarland",
      "email": "brendan@mapbox.com"
    },
    {
      "name": "mokob",
      "email": "moritz@mapbox.com"
    },
    {
      "name": "karenzshea",
      "email": "karen@mapbox.com"
    },
    {
      "name": "davidtheclark",
      "email": "david.dave.clark@gmail.com"
    },
    {
      "name": "amyleew",
      "email": "amyleewalton@gmail.com"
    },
    {
      "name": "ian29",
      "email": "ian.villeda@gmail.com"
    },
    {
      "name": "nickidlugash",
      "email": "nicki@mapbox.com"
    },
    {
      "name": "jrpruit1",
      "email": "jake@jakepruitt.com"
    },
    {
      "name": "mcwhittemore",
      "email": "mcwhittemore@gmail.com"
    },
    {
      "name": "isiyu",
      "email": "siyu.song@gmail.com"
    },
    {
      "name": "ghoshkaj",
      "email": "ghoshkaj@gmail.com"
    },
    {
      "name": "alulsh",
      "email": "ulsh@mapbox.com"
    },
    {
      "name": "emilymcafee",
      "email": "emily@mapbox.com"
    },
    {
      "name": "mapsam",
      "email": "sam@mapbox.com"
    },
    {
      "name": "lxbarth",
      "email": "alex@mapbox.com"
    },
    {
      "name": "willwhite",
      "email": "will@mapbox.com"
    },
    {
      "name": "batpad",
      "email": "sanjay@mapbox.com"
    },
    {
      "name": "geohacker",
      "email": "sajjadkm@gmail.com"
    },
    {
      "name": "arunasank",
      "email": "aruna@mapbox.com"
    },
    {
      "name": "kaidalgleish",
      "email": "kai@mapbox.com"
    },
    {
      "name": "mattficke",
      "email": "matt@mattficke.com"
    },
    {
      "name": "apendleton",
      "email": "andrew@mapbox.com"
    },
    {
      "name": "ingalls",
      "email": "nicholas.ingalls@gmail.com"
    },
    {
      "name": "sbma44",
      "email": "thomas.j.lee@gmail.com"
    },
    {
      "name": "emilymdubois",
      "email": "dubois@mapbox.com"
    },
    {
      "name": "yhahn",
      "email": "young@mapbox.com"
    },
    {
      "name": "ianshward",
      "email": "ian@mapbox.com"
    },
    {
      "name": "miccolis",
      "email": "jeff@miccolis.net"
    },
    {
      "name": "rclark",
      "email": "ryan.clark.j@gmail.com"
    },
    {
      "name": "lbud",
      "email": "lauren@mapbox.com"
    },
    {
      "name": "bsudekum",
      "email": "bobby@mapbox.com"
    },
    {
      "name": "tristen",
      "email": "tristen.brown@gmail.com"
    },
    {
      "name": "mapbox-admin",
      "email": "accounts@mapbox.com"
    }
  ],
  "name": "@mapbox/shelf-pack",
  "optionalDependencies": {},
  "readme": "[![npm version](https://badge.fury.io/js/%40mapbox%2Fshelf-pack.svg)](https://badge.fury.io/js/%40mapbox%2Fshelf-pack)\n[![Build Status](https://secure.travis-ci.org/mapbox/shelf-pack.svg)](http://travis-ci.org/mapbox/shelf-pack)\n[![Coverage Status](https://coveralls.io/repos/github/mapbox/shelf-pack/badge.svg?branch=master)](https://coveralls.io/github/mapbox/shelf-pack?branch=master)\n\n## shelf-pack\n\nA 2D rectangular [bin packing](https://en.wikipedia.org/wiki/Bin_packing_problem)\ndata structure that uses the Shelf Best Height Fit heuristic.\n\n\n### What is it?\n\n`shelf-pack` is a library for packing little rectangles into a big rectangle.  This sounds simple enough,\nbut finding an optimal packing is a problem with [NP-Complete](https://en.wikipedia.org/wiki/NP-completeness)\ncomplexity.  One useful application of bin packing is to assemble icons or glyphs into a sprite texture.\n\nThere are many ways to approach the bin packing problem, but `shelf-pack` uses the Shelf Best\nHeight Fit heuristic.  It works by dividing the total space into \"shelves\", each with a certain height.\nThe allocator packs rectangles onto whichever shelf minimizes the amount of wasted vertical space.\n\n`shelf-pack` is simple, fast, and works best when the rectangles have similar heights (icons and glyphs\nare like this).  It is not a generalized bin packer, and can potentially waste a lot of space if the\nrectangles vary significantly in height.\n\n\n### How fast is it?\n\nReally fast!  `shelf-pack` is several orders of magnitude faster than the more general\n[`bin-pack`](https://www.npmjs.com/package/bin-pack) library.\n\n```bash\n> npm run bench\n\nShelfPack single allocate fixed size bins x 1,610 ops/sec ±1.21% (90 runs sampled)\nShelfPack single allocate random width bins x 1,475 ops/sec ±1.00% (89 runs sampled)\nShelfPack single allocate random height bins x 1,458 ops/sec ±1.00% (90 runs sampled)\nShelfPack single allocate random height and width bins x 1,346 ops/sec ±0.96% (89 runs sampled)\nShelfPack batch allocate fixed size bins x 1,522 ops/sec ±1.06% (86 runs sampled)\nShelfPack batch allocate random width bins x 1,427 ops/sec ±1.06% (89 runs sampled)\nShelfPack batch allocate random height bins x 1,350 ops/sec ±1.63% (90 runs sampled)\nShelfPack batch allocate random height and width bins x 1,257 ops/sec ±1.02% (89 runs sampled)\nBinPack batch allocate fixed size bins x 2.21 ops/sec ±6.60% (10 runs sampled)\nBinPack batch allocate random width bins x 0.50 ops/sec ±2.25% (6 runs sampled)\nBinPack batch allocate random height bins x 0.51 ops/sec ±1.97% (6 runs sampled)\nBinPack batch allocate random height and width bins x 0.51 ops/sec ±1.37% (6 runs sampled)\n```\n\n\n### Usage\n\n#### Basic Usage\n\n```js\nvar ShelfPack = require('@mapbox/shelf-pack');\n\n// Initialize the sprite with a width and height..\nvar sprite = new ShelfPack(64, 64);\n\n// Pack bins one at a time..\nfor (var i = 0; i < 5; i++) {\n    // packOne() accepts parameters: `width`, `height`, `id`\n    // and returns a single allocated Bin object..\n    // `id` is optional - if you skip it, shelf-pack will make up a number for you..\n    // (Protip: numeric ids are much faster than string ids)\n\n    var bin = sprite.packOne(32, 32);\n    console.log(bin || 'out of space');\n}\n\n/* output:\nBin { id: 1, x: 0, y: 0, w: 32, h: 32, maxw: 32, maxh: 32, refcount: 1 }\nBin { id: 2, x: 32, y: 0, w: 32, h: 32, maxw: 32, maxh: 32, refcount: 1 }\nBin { id: 3, x: 0, y: 32, w: 32, h: 32, maxw: 32, maxh: 32, refcount: 1 }\nBin { id: 4, x: 32, y: 32, w: 32, h: 32, maxw: 32, maxh: 32, refcount: 1 }\nout of space\n*/\n\n// Clear sprite and start over..\nsprite.clear();\n\n// Or, resize sprite by passing larger dimensions..\nsprite.resize(128, 128);   // width, height\n\n```\n\n\n#### Batch packing\n\n```js\nvar ShelfPack = require('@mapbox/shelf-pack');\n\n// If you don't want to think about the size of the sprite,\n// the `autoResize` option will allow it to grow as needed..\nvar sprite = new ShelfPack(10, 10, { autoResize: true });\n\n// Bins can be allocated in batches..\n// Each requested bin should have `w`, `h` (or `width`, `height`) properties..\nvar requests = [\n    { id: 'a', width: 10, height: 10 },\n    { id: 'b', width: 10, height: 12 },\n    { id: 'c', w: 10, h: 12 },\n    { id: 'd', w: 10, h: 10 }\n];\n\n// pack() returns an Array of packed Bin objects..\nvar results = sprite.pack(requests);\n\nresults.forEach(function(bin) {\n    console.log(bin);\n});\n\n/* output:\nBin { id: 'a', x: 0, y: 0, w: 10, h: 10, maxw: 10, maxh: 10, refcount: 1 }\nBin { id: 'b', x: 0, y: 10, w: 10, h: 12, maxw: 10, maxh: 12, refcount: 1 }\nBin { id: 'c', x: 10, y: 10, w: 10, h: 12, maxw: 10, maxh: 12, refcount: 1 }\nBin { id: 'd', x: 10, y: 0, w: 10, h: 10, maxw: 10, maxh: 10, refcount: 1 }\n*/\n\n// If you don't mind letting ShelfPack modify your objects,\n// the `inPlace` option will decorate your bin objects with `x` and `y` properties.\n// Fancy!\nvar myBins = [\n    { id: 'e', width: 12, height: 24 },\n    { id: 'f', width: 12, height: 12 },\n    { id: 'g', w: 10, h: 10 }\n];\n\nsprite.pack(myBins, { inPlace: true });\nmyBins.forEach(function(bin) {\n    console.log(bin);\n});\n\n/* output:\n{ id: 'e', width: 12, height: 24, x: 0, y: 22 }\n{ id: 'f', width: 12, height: 12, x: 20, y: 10 }\n{ id: 'g', w: 10, h: 10, x: 20, y: 0 }\n*/\n\n```\n\n#### Reference Counting\n\n```js\nvar ShelfPack = require('@mapbox/shelf-pack');\n\n// Initialize the sprite with a width and height..\nvar sprite = new ShelfPack(64, 64);\n\n// Allocated bins are automatically reference counted.\n// They start out having a refcount of 1.\n[100, 101, 102].forEach(function(id) {\n    var bin = sprite.packOne(16, 16, id);\n    console.log(bin);\n});\n\n/* output:\nBin { id: 100, x: 0, y: 0, w: 16, h: 16, maxw: 16, maxh: 16, refcount: 1 }\nBin { id: 101, x: 16, y: 0, w: 16, h: 16, maxw: 16, maxh: 16, refcount: 1 }\nBin { id: 102, x: 32, y: 0, w: 16, h: 16, maxw: 16, maxh: 16, refcount: 1 }\n*/\n\n// If you try to pack the same id again, shelf-pack will not re-pack it.\n// Instead, it will increment the reference count automatically..\nvar bin102 = sprite.packOne(16, 16, 102);\nconsole.log(bin102);\n\n/* output:\nBin { id: 102, x: 32, y: 0, w: 16, h: 16, maxw: 16, maxh: 16, refcount: 2 }\n*/\n\n// You can also manually increment the reference count..\nvar bin101 = sprite.getBin(101);\nsprite.ref(bin101);\nconsole.log(bin101);\n\n/* output:\nBin { id: 101, x: 16, y: 0, w: 16, h: 16, maxw: 16, maxh: 16, refcount: 2 }\n*/\n\n// ...and decrement it!\nvar bin100 = sprite.getBin(100);\nsprite.unref(bin100);\nconsole.log(bin100);\n\n/* output:\nBin { id: 100, x: 0, y: 0, w: 16, h: 16, maxw: 16, maxh: 16, refcount: 0 }\n*/\n\n// Bins with a refcount of 0 are considered free space.\n// Next time a bin is packed, shelf-back tries to reuse free space first.\n// See how Bin 103 gets allocated at [0,0] - Bin 100's old spot!\nvar bin103 = sprite.packOne(16, 15, 103);\nconsole.log(bin103);\n\n/* output:\nBin { id: 103, x: 0, y: 0, w: 16, h: 15, maxw: 16, maxh: 16, refcount: 1 }\n*/\n\n// Bin 103 may be smaller (16x15) but it knows 16x16 was its original size.\n// If that space becomes free again, a 16x16 bin will still fit there.\nsprite.unref(bin103)\nvar bin104 = sprite.packOne(16, 16, 104);\nconsole.log(bin104);\n\n/* output:\nBin { id: 104, x: 0, y: 0, w: 16, h: 16, maxw: 16, maxh: 16, refcount: 1 }\n*/\n\n```\n\n\n### Documentation\n\nComplete API documentation is here:  http://mapbox.github.io/shelf-pack/\n\n\n### See also\n\nJ. Jylänky, \"A Thousand Ways to Pack the Bin - A Practical\nApproach to Two-Dimensional Rectangle Bin Packing,\"\nhttp://clb.demon.fi/files/RectangleBinPack.pdf, 2010\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mapbox/shelf-pack.git"
  },
  "scripts": {
    "bench": "npm run build && node bench/bench.js",
    "build": "rollup -f umd -n ShelfPack index.js --no-indent --no-strict -o index.umd.js",
    "docs": "documentation build index.js --lint --github --format html --output docs/",
    "lint": "eslint index.js test/ bench/",
    "test": "npm run build && npm run lint && tap --cov test/*.js"
  },
  "version": "3.1.0"
}
