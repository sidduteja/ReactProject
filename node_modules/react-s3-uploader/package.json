{
  "_args": [
    [
      {
        "raw": "react-s3-uploader@^4.2.0",
        "scope": null,
        "escapedName": "react-s3-uploader",
        "name": "react-s3-uploader",
        "rawSpec": "^4.2.0",
        "spec": ">=4.2.0 <5.0.0",
        "type": "range"
      },
      "/home/devrabbit/Desktop/ReactProject"
    ]
  ],
  "_from": "react-s3-uploader@>=4.2.0 <5.0.0",
  "_id": "react-s3-uploader@4.8.0",
  "_inCache": true,
  "_location": "/react-s3-uploader",
  "_nodeVersion": "8.1.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-s3-uploader_4.8.0_1522038447970_0.9682148746429282"
  },
  "_npmUser": {
    "name": "sadkinson",
    "email": "sean.adkinson@gmail.com"
  },
  "_npmVersion": "5.0.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-s3-uploader@^4.2.0",
    "scope": null,
    "escapedName": "react-s3-uploader",
    "name": "react-s3-uploader",
    "rawSpec": "^4.2.0",
    "spec": ">=4.2.0 <5.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-s3-uploader/-/react-s3-uploader-4.8.0.tgz",
  "_shasum": "aab3616a12488903a0e663007fb05a11ede908c9",
  "_shrinkwrap": null,
  "_spec": "react-s3-uploader@^4.2.0",
  "_where": "/home/devrabbit/Desktop/ReactProject",
  "author": {
    "name": "Sean Adkinson"
  },
  "bugs": {
    "url": "https://github.com/odysseyscience/react-s3-uploader/issues"
  },
  "dependencies": {
    "aws-sdk": "2.x",
    "create-react-class": "^15.5.2",
    "object-assign": "^2.0.0",
    "prop-types": "^15.5.8",
    "uuid": "^3.1.0"
  },
  "description": "React component that renders a file input and automatically uploads to an S3 bucket",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "integrity": "sha512-vKt6Gh+pFnkLOHkcOBtAKcbWvs8dHB1/xB9zu6yafvny0/IatVqBoZFp+jVnACLCVkex5hjMUHFknYifF2OoXA==",
    "shasum": "aab3616a12488903a0e663007fb05a11ede908c9",
    "tarball": "https://registry.npmjs.org/react-s3-uploader/-/react-s3-uploader-4.8.0.tgz",
    "fileCount": 9,
    "unpackedSize": 27821
  },
  "gitHead": "22e6c19a2a9fa7e6e2e3bbc53b52207bed0f7ae1",
  "homepage": "https://github.com/odysseyscience/react-s3-uploader",
  "keywords": [
    "react",
    "upload",
    "component",
    "s3",
    "bucket"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "sadkinson",
      "email": "sean.adkinson@gmail.com"
    }
  ],
  "name": "react-s3-uploader",
  "optionalDependencies": {},
  "readme": "react-s3-uploader\n===========================\n\nProvides a `React` component that automatically uploads to an S3 Bucket.\n\nInstall\n-----------\n```bash\n$ npm install --save react-s3-uploader\n```\nFrom Browser\n------------\n\n```jsx\nvar ReactS3Uploader = require('react-s3-uploader');\n\n...\n\n<ReactS3Uploader\n    signingUrl=\"/s3/sign\"\n    signingUrlMethod=\"GET\"\n    accept=\"image/*\"\n    s3path=\"/uploads/\"\n    preprocess={this.onUploadStart}\n    onSignedUrl={this.onSignedUrl}\n    onProgress={this.onUploadProgress}\n    onError={this.onUploadError}\n    onFinish={this.onUploadFinish}\n    signingUrlHeaders={{ additional: headers }}\n    signingUrlQueryParams={{ additional: query-params }}\n    signingUrlWithCredentials={ true }      // in case when need to pass authentication credentials via CORS\n    uploadRequestHeaders={{ 'x-amz-acl': 'public-read' }}  // this is the default\n    contentDisposition=\"auto\"\n    scrubFilename={(filename) => filename.replace(/[^\\w\\d_\\-.]+/ig, '')}\n    server=\"http://cross-origin-server.com\"\n    inputRef={cmp => this.uploadInput = cmp}\n    autoUpload={true}\n    />\n```\n\nThe above example shows all supported `props`.\n\nThis expects a request to `/s3/sign` to return JSON with a `signedUrl` property that can be used\nto PUT the file in S3.\n\n`contentDisposition` is optional and can be one of `inline`, `attachment` or `auto`. If given,\nthe `Content-Disposition` header will be set accordingly with the file's original filename.\nIf it is `auto`, the disposition type will be set to `inline` for images and `attachment` for\nall other files.\n\n`server` is optional and can be used to specify the location of the server which is\nrunning the ReactS3Uploader server component if it is not the same as the one from\nwhich the client is served.\n\nUse `scrubFilename` to provide custom filename scrubbing before uploading.  Prior to version 4.0, this library used `unorm` and `latinize` to filter out characters.  Since 4.0, we simply remove all characters that are not alphanumeric, underscores, dashes, or periods.\n\nThe resulting DOM is essentially:\n\n```jsx\n<input type=\"file\" onChange={this.uploadFile} />\n```\n\nThe `preprocess(file, next)` prop provides an opportunity to do something before the file upload begins,\nmodify the file (scaling the image for example), or abort the upload by not calling `next(file)`.\n\nWhen a file is chosen, it will immediately be uploaded to S3 (unless `autoUpload` is `false`).  You can listen for progress (and create a status bar, for example) by providing an `onProgress` function to the component.\n\n### Extra props\nYou can pass any extra props to `<ReactS3Uploader />` and these will be passed down to the final `<input />`. which means that if you give the ReactS3Uploader a className or a name prop the input will have those as well.\n\nUsing custom function to get signedUrl\n------------\n\nIt is possible to use a custom function to provide `signedUrl` directly to `s3uploader` by adding `getSignedUrl` prop. The function you provide should take `file` and `callback` arguments. Callback should be called with an object containing `signedUrl` key.\n\n```javascript\nimport ApiClient from './ApiClient';\n\nfunction getSignedUrl(file, callback) {\n  const client = new ApiClient();\n  const params = {\n    objectName: file.name,\n    contentType: file.type\n  };\n\n  client.get('/my/signing/server', { params })\n  .then(data => {\n    callback(data);\n  })\n  .catch(error => {\n    console.error(error);\n  });\n}\n\n\n<ReactS3Uploader\n  className={uploaderClassName}\n  getSignedUrl={getSignedUrl}\n  accept=\"image/*\"\n  onProgress={onProgress}\n  onError={onError}\n  onFinish={onFinish}\n  uploadRequestHeaders={{\n    'x-amz-acl': 'public-read'\n  }}\n  contentDisposition=\"auto\"\n/>\n\n```\n\nServer-Side\n-----------\n### Bundled router\nYou can use the Express router that is bundled with this module to answer calls to `/s3/sign`\n\n```js\napp.use('/s3', require('react-s3-uploader/s3router')({\n    bucket: \"MyS3Bucket\",\n    region: 'us-east-1', //optional\n    signatureVersion: 'v4', //optional (use for some amazon regions: frankfurt and others)\n    headers: {'Access-Control-Allow-Origin': '*'}, // optional\n    ACL: 'private', // this is default\n    uniquePrefix: true // (4.0.2 and above) default is true, setting the attribute to false preserves the original filename in S3\n}));\n```\n\nThis also provides another endpoint: `GET /s3/img/(.*)` and `GET /s3/uploads/(.*)`.  This will create a temporary URL\nthat provides access to the uploaded file (which are uploaded privately by default).  The\nrequest is then redirected to the URL, so that the image is served to the client.\n\nIf you need to use pass more than region and signatureVersion to S3 instead use the `getS3` param. `getS3` accepts a\nfunction that returns a new AWS.S3 instance. This is also useful if you want to mock S3 for testing purposes.\n\n**To use this you will need to include the [express module](https://www.npmjs.com/package/express) in your package.json dependencies.**\n\n#### Access/Secret Keys\n\nThe `aws-sdk` must be configured with your account's Access Key and Secret Access Key.  [There are a number of ways to provide these](http://docs.aws.amazon.com/AWSJavaScriptSDK/guide/node-configuring.html), but setting up environment variables is the quickest.  You just have to configure environment variables `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`, and AWS automatically picks them up.\n\n### Other Types of Servers\n\n##### Boto for Python, in a Django project\n\n```python\nimport boto\nimport mimetypes\nimport json\n\n...\n\nconn = boto.connect_s3('AWS_KEY', 'AWS_SECRET')\n\ndef sign_s3_upload(request):\n    object_name = request.GET['objectName']\n    content_type = mimetypes.guess_type(object_name)[0]\n\n    signed_url = conn.generate_url(\n        300,\n        \"PUT\",\n        'BUCKET_NAME',\n        'FOLDER_NAME' + object_name,\n        headers = {'Content-Type': content_type, 'x-amz-acl':'public-read'})\n\n    return HttpResponse(json.dumps({'signedUrl': signed_url}))\n```\n\n#### Ruby on Rails, assuming FOG usage\n\n```ruby\n# Usual fog config, set as an initializer\nstorage = Fog::Storage.new(\n  provider: 'AWS',\n  aws_access_key_id: ENV['AWS_ACCESS_KEY_ID'],\n  aws_secret_access_key: ENV['AWS_SECRET_ACCESS_KEY']\n)\n\n# In the controller\noptions = {path_style: true}\nheaders = {\"Content-Type\" => params[:contentType], \"x-amz-acl\" => \"public-read\"}\n\nurl = storage.put_object_url(ENV['S3_BUCKET_NAME'], \"user_uploads/#{params[:objectName]}\", 15.minutes.from_now.to_time.to_i, headers, options)\n\nrespond_to do |format|\n  format.json { render json: {signedUrl: url} }\nend\n```\n\n#### [Micro](https://github.com/zeit/micro)\n\n```javascript\nconst aws = require('aws-sdk')\nconst uuidv4 = require('uuid/v4')\nconst { createError } = require('micro')\n\nconst options = {\n  bucket: 'S3_BUCKET_NAME',\n  region: 'S3_REGION',\n  signatureVersion: 'v4',\n  ACL: 'public-read'\n}\n\nconst s3 = new aws.S3(options)\n\nmodule.exports = (req, res) => {\n  const originalFilename = req.query.objectName\n\n  // custom filename using random uuid + file extension\n  const fileExtension = originalFilename.split('.').pop()\n  const filename = `${uuidv4()}.${fileExtension}`\n\n  const params = {\n    Bucket: options.bucket,\n    Key: filename,\n    Expires: 60,\n    ContentType: req.query.contentType,\n    ACL: options.ACL\n  }\n\n  const signedUrl = s3.getSignedUrl('putObject', params)\n\n  if (signedUrl) {\n    // you may also simply return the signed url, i.e. `return { signedUrl }`\n    return {\n      signedUrl,\n      filename,\n      originalFilename,\n      publicUrl: signedUrl.split('?').shift()\n    }\n  } else {\n    throw createError(500, 'Cannot create S3 signed URL')\n  }\n}\n```\n\n\n##### Other Servers\n\nIf you do some work on another server, and would love to contribute documentation, please send us a PR!\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/odysseyscience/react-s3-uploader.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "4.8.0"
}
