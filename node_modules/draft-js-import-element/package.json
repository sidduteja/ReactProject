{
  "_args": [
    [
      {
        "raw": "draft-js-import-element@^1.2.1",
        "scope": null,
        "escapedName": "draft-js-import-element",
        "name": "draft-js-import-element",
        "rawSpec": "^1.2.1",
        "spec": ">=1.2.1 <2.0.0",
        "type": "range"
      },
      "/home/devrabbit/Desktop/ReactProject/node_modules/draft-js-import-html"
    ]
  ],
  "_from": "draft-js-import-element@>=1.2.1 <2.0.0",
  "_id": "draft-js-import-element@1.2.1",
  "_inCache": true,
  "_location": "/draft-js-import-element",
  "_nodeVersion": "8.6.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/draft-js-import-element-1.2.1.tgz_1507197495956_0.2229814783204347"
  },
  "_npmUser": {
    "name": "sstur",
    "email": "sstur@me.com"
  },
  "_npmVersion": "5.3.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "draft-js-import-element@^1.2.1",
    "scope": null,
    "escapedName": "draft-js-import-element",
    "name": "draft-js-import-element",
    "rawSpec": "^1.2.1",
    "spec": ">=1.2.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/draft-js-import-html",
    "/draft-js-import-markdown"
  ],
  "_resolved": "https://registry.npmjs.org/draft-js-import-element/-/draft-js-import-element-1.2.1.tgz",
  "_shasum": "9a6a56d74690d48d35d8d089564e6d710b4926eb",
  "_shrinkwrap": null,
  "_spec": "draft-js-import-element@^1.2.1",
  "_where": "/home/devrabbit/Desktop/ReactProject/node_modules/draft-js-import-html",
  "author": {
    "name": "sstur@me.com"
  },
  "bugs": {
    "url": "https://github.com/sstur/draft-js-utils/issues"
  },
  "contributors": [
    {
      "name": "Per Nilsson",
      "url": "https://github.com/coopy"
    },
    {
      "name": "Simon Sturmer",
      "url": "https://github.com/sstur"
    }
  ],
  "dependencies": {
    "draft-js-utils": "^1.2.0",
    "synthetic-dom": "^1.2.0"
  },
  "description": "DraftJS: Import Element to ContentState",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "integrity": "sha512-T/eCDkaU8wrTCH6c+/2BE7Vx/11GABRNU/UBiHM4D903LNFar8UfjElehpiKVf+F4rxi8dfhvTgaWrpWDfX4MA==",
    "shasum": "9a6a56d74690d48d35d8d089564e6d710b4926eb",
    "tarball": "https://registry.npmjs.org/draft-js-import-element/-/draft-js-import-element-1.2.1.tgz"
  },
  "homepage": "https://github.com/sstur/draft-js-utils/blob/master/packages/draft-js-import-element/README.md",
  "keywords": [
    "draft-js",
    "import-element"
  ],
  "license": "ISC",
  "main": "lib/main.js",
  "maintainers": [
    {
      "name": "sstur",
      "email": "sstur@me.com"
    }
  ],
  "name": "draft-js-import-element",
  "optionalDependencies": {},
  "peerDependencies": {
    "draft-js": ">=0.10.0",
    "immutable": "3.x.x"
  },
  "readme": "# DraftJS: Import Element to ContentState\n\nThis is a module for [DraftJS](https://github.com/facebook/draft-js) that will convert an HTML DOM Element to editor content.\n\nIt was extracted from [React-RTE](https://react-rte.org) and placed into a separate module for more general use. Hopefully it can be helpful in your projects.\n\n## Installation\n\n    npm install --save draft-js-import-element\n\nThis project is still under development. If you want to help out, please open an issue to discuss or join us on [Slack](https://draftjs.slack.com/).\n\n## Usage\n\n`stateFromElement` takes a DOM node `element` and returns a DraftJS [ContentState](https://facebook.github.io/draft-js/docs/api-reference-content-state.html).\n\n```js\nimport {stateFromElement} from 'draft-js-import-element';\nconst contentState = stateFromElement(element);\n```\n\n### Options\n\nYou can optionally pass a second `Object` argument to `stateFromElement` with the following supported properties:\n\n- `customBlockFn`: Function to specify block type/data based on HTML element. Example:\n```js\nlet options = {\n  // Should return null/undefined or an object with optional: type (string); data (plain object)\n  customBlockFn: (element) => {\n    if (element.tagName === 'ARTICLE') {\n      return {type: 'custom-block-type'};\n    }\n    if (element.tagName === 'CENTER') {\n      return {data: {align: 'center'}};\n    }\n  },\n};\nlet contentState = stateFromElement(element, options);\n```\n\n- `customInlineFn`: Function to specify how inline elements are handled. Example:\n\n```js\nlet options = {\n  // Should return a Style() or Entity() or null/undefined\n  customInlineFn: (element, {Style, Entity}) => {\n    if (element.tagName === 'SPAN' && element.className === 'emphasis') {\n      return Style('ITALIC');\n    } else if (element.tagName === 'IMG') {\n      return Entity('IMAGE', {src: element.getAttribute('src')});\n    }\n  },\n};\nlet contentState = stateFromElement(element, options);\n```\n\n- `elementStyles`: HTML element name as key, DraftJS style string as value. Example:\n```js\nstateFromElement(element, {\n  elementStyles: {\n    // Support `<sup>` (superscript) inline element:\n    'sup': 'SUPERSCRIPT',\n  },\n});\n```\n\n## License\n\nThis software is [BSD Licensed](/LICENSE).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "https://github.com/sstur/draft-js-utils/tree/master/packages/draft-js-import-element"
  },
  "scripts": {
    "build": "babel src --out-dir lib --ignore \"_*\"",
    "watch": "babel src --watch --out-dir lib --ignore \"_*\""
  },
  "version": "1.2.1"
}
