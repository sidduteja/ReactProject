{
  "_args": [
    [
      {
        "raw": "unassert@^1.3.1",
        "scope": null,
        "escapedName": "unassert",
        "name": "unassert",
        "rawSpec": "^1.3.1",
        "spec": ">=1.3.1 <2.0.0",
        "type": "range"
      },
      "/home/devrabbit/Desktop/ReactProject/node_modules/unassertify"
    ]
  ],
  "_from": "unassert@>=1.3.1 <2.0.0",
  "_id": "unassert@1.5.1",
  "_inCache": true,
  "_location": "/unassert",
  "_nodeVersion": "7.1.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/unassert-1.5.1.tgz_1483280582362_0.5309837164822966"
  },
  "_npmUser": {
    "name": "twada",
    "email": "takuto.wada@gmail.com"
  },
  "_npmVersion": "3.10.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "unassert@^1.3.1",
    "scope": null,
    "escapedName": "unassert",
    "name": "unassert",
    "rawSpec": "^1.3.1",
    "spec": ">=1.3.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/unassertify"
  ],
  "_resolved": "https://registry.npmjs.org/unassert/-/unassert-1.5.1.tgz",
  "_shasum": "cbc88ec387417c5a5e4c02d3cd07be98bd75ff76",
  "_shrinkwrap": null,
  "_spec": "unassert@^1.3.1",
  "_where": "/home/devrabbit/Desktop/ReactProject/node_modules/unassertify",
  "author": {
    "name": "Takuto Wada",
    "email": "takuto.wada@gmail.com",
    "url": "https://github.com/twada"
  },
  "bugs": {
    "url": "https://github.com/unassert-js/unassert/issues"
  },
  "dependencies": {
    "acorn": "^4.0.0",
    "call-matcher": "^1.0.1",
    "deep-equal": "^1.0.0",
    "espurify": "^1.3.0",
    "estraverse": "^4.1.0",
    "esutils": "^2.0.2",
    "object-assign": "^4.1.0"
  },
  "description": "Encourages programming with assertions by providing tools to compile them away",
  "devDependencies": {
    "escodegen": "^1.7.0",
    "mocha": "^2.3.3"
  },
  "directories": {},
  "dist": {
    "shasum": "cbc88ec387417c5a5e4c02d3cd07be98bd75ff76",
    "tarball": "https://registry.npmjs.org/unassert/-/unassert-1.5.1.tgz"
  },
  "files": [
    "README.md",
    "CHANGELOG.md",
    "LICENSE",
    "index.js",
    "lib",
    "package.json"
  ],
  "gitHead": "bf92f9804d8c1fb63b0421da52385522af5bd0e0",
  "homepage": "https://github.com/unassert-js/unassert",
  "keywords": [
    "DbC",
    "unassert",
    "assert",
    "assertion"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "twada",
      "email": "takuto.wada@gmail.com"
    }
  ],
  "name": "unassert",
  "optionalDependencies": {},
  "readme": "[![unassert][unassert-banner]][unassert-url]\n\nEncourages programming with assertions by providing tools to compile them away.\n\n[![Build Status][travis-image]][travis-url]\n[![NPM version][npm-image]][npm-url]\n[![Dependency Status][depstat-image]][depstat-url]\n[![License][license-image]][license-url]\n\nSee: \"[unassert - encourage reliable programming by writing assertions in production](http://www.slideshare.net/t_wada/unassert)\" -- talk at NodeFest 2015, and \"One more thing...\" in talk at NodeFest 2016, titled \"[From Library to Tool - power-assert as a General Purpose Assertion Enhancement Tool](https://speakerdeck.com/twada/from-library-to-tool-power-assert-as-a-general-purpose-assertion-enhancement-tool):\n\n\n#### RELATED MODULES\n\n- [unassertify](https://github.com/unassert-js/unassertify): Browserify transform for unassert\n- [babel-plugin-unassert](https://github.com/unassert-js/babel-plugin-unassert): Babel plugin for unassert\n- [webpack-unassert-loader](https://github.com/unassert-js/webpack-unassert-loader): Webpack loader for unassert\n- [gulp-unassert](https://github.com/unassert-js/gulp-unassert): Gulp plugin for unassert\n- [unassert-cli](https://github.com/unassert-js/unassert-cli): CLI for unassert\n\n\nINSTALL\n---------------------------------------\n\n```\n$ npm install --save-dev unassert\n```\n\n\nAPI\n---------------------------------------\n\n### var modifiedAst = unassert(ast)\n\n| return type                                                   |\n|:--------------------------------------------------------------|\n| `object` ([ECMAScript AST](https://github.com/estree/estree)) |\n\nRemove assertion calls matched to [patterns](https://github.com/unassert-js/unassert#supported-patterns) from `ast` ([ECMAScript AST](https://github.com/estree/estree)). `ast` is manipulated directly so returned `modifiedAst` will be the same instance of `ast`.\n\nAssertion expressions are removed when they match [default patterns](https://github.com/unassert-js/unassert#supported-patterns). In other words, unassert removes assertion calls that are compatible with Node.js standard assert API (and console.assert).\n\n\n### var visitor = unassert.createVisitor(options)\n\n| return type                                                                       |\n|:----------------------------------------------------------------------------------|\n| `object` (visitor object for [estraverse](https://github.com/estools/estraverse)) |\n\nCreate visitor object to be used with `estraverse.replace`. Visitor can be customized by `options`.\n\n\n#### options\n\nObject for configuration options. passed `options` is `Object.assign`ed with default options. If not passed, default options will be used.\n\n\n##### options.assertionPatterns\n\nTarget patterns for assertion removal.\n\nIf callee name (for example, `assert.equal`) matches exactly and number of arguments is satisfied, then the assertion will be removed. Patterns are handled with [call-matcher](https://github.com/twada/call-matcher). Any arguments enclosed in bracket (for example, `[message]`) means optional parameters. Without bracket means mandatory parameters.\n\n\n##### options.requirePatterns\n\nTarget patterns for `require` call removal. Must be in form of assignments.\n\nFor example,\n\n```js\n{\n    requirePatterns: [\n        'assert = require(\"assert\")'\n    ],\n```\n\nwill remove `var assert = require(\"assert\")`, `let assert = require(\"assert\")`, `const assert = require(\"assert\")` and `var assert; assert = require(\"assert\")` as well.\n\n\n##### options.importPatterns\n\nTarget patterns for import declaration removal.\n\nFor example,\n\n```js\n{\n    importPatterns: [\n        'import assert from \"assert\"',\n        'import * as assert from \"assert\"',\n        'import assert from \"power-assert\"',\n        'import * as assert from \"power-assert\"'\n    ]\n```\n\n### var options = unassert.defaultOptions()\n\nReturns default options object for `createVisitor` function. In other words, returns\n\n```js\n{\n    assertionPatterns: [\n        'assert(value, [message])',\n        'assert.ok(value, [message])',\n        'assert.equal(actual, expected, [message])',\n        'assert.notEqual(actual, expected, [message])',\n        'assert.strictEqual(actual, expected, [message])',\n        'assert.notStrictEqual(actual, expected, [message])',\n        'assert.deepEqual(actual, expected, [message])',\n        'assert.notDeepEqual(actual, expected, [message])',\n        'assert.deepStrictEqual(actual, expected, [message])',\n        'assert.notDeepStrictEqual(actual, expected, [message])',\n        'assert.fail(actual, expected, message, operator)',\n        'assert.throws(block, [error], [message])',\n        'assert.doesNotThrow(block, [message])',\n        'assert.ifError(value)',\n        'console.assert(value, [message])'\n    ],\n    requirePatterns: [\n        'assert = require(\"assert\")',\n        'assert = require(\"power-assert\")'\n    ],\n    importPatterns: [\n        'import assert from \"assert\"',\n        'import * as assert from \"assert\"',\n        'import assert from \"power-assert\"',\n        'import * as assert from \"power-assert\"'\n    ]\n}\n```\n\n\nEXAMPLE\n---------------------------------------\n\nFor given `math.js` below,\n\n```javascript\n'use strict';\n\nvar assert = require('assert');\n\nfunction add (a, b) {\n    console.assert(typeof a === 'number');\n    assert(!isNaN(a));\n    assert.equal(typeof b, 'number');\n    assert.ok(!isNaN(b));\n    return a + b;\n}\n```\n\nApply `unassert` then generate modified code to console.\n\n```javascript\nvar acorn = require('acorn');\nvar escodegen = require('escodegen');\nvar unassert = require('unassert');\nvar fs = require('fs');\nvar path = require('path');\nvar filepath = path.join(__dirname, 'math.js');\n\nvar ast = acorn.parse(fs.readFileSync(filepath));\nvar modifiedAst = unassert(ast);\n\nconsole.log(escodegen.generate(modifiedAst));\n```\n\nThen you will see assert calls disappear.\n\n```javascript\n'use strict';\nfunction add(a, b) {\n    return a + b;\n}\n```\n\nNote: unassert supports removal of [power-assert](https://github.com/power-assert-js/power-assert) declarations (`var assert = require('power-assert');`) too.\n\n\nSUPPORTED PATTERNS\n---------------------------------------\n\nAssertion expressions are removed when they match patterns below. In other words, unassert removes assertion calls that are compatible with Node.js standard [assert](https://nodejs.org/api/assert.html) API (and `console.assert`).\n\n* `assert(value, [message])`\n* `assert.ok(value, [message])`\n* `assert.equal(actual, expected, [message])`\n* `assert.notEqual(actual, expected, [message])`\n* `assert.strictEqual(actual, expected, [message])`\n* `assert.notStrictEqual(actual, expected, [message])`\n* `assert.deepEqual(actual, expected, [message])`\n* `assert.notDeepEqual(actual, expected, [message])`\n* `assert.deepStrictEqual(actual, expected, [message])`\n* `assert.notDeepStrictEqual(actual, expected, [message])`\n* `assert.fail(actual, expected, message, operator)`\n* `assert.throws(block, [error], [message])`\n* `assert.doesNotThrow(block, [message])`\n* `assert.ifError(value)`\n* `console.assert(value, [message])`\n\nunassert also removes assert variable declarations,\n\n* `var assert = require(\"assert\")`\n* `var assert = require(\"power-assert\")`\n* `import assert from \"assert\"`\n* `import assert from \"power-assert\"`\n* `import * as assert from \"assert\"`\n* `import * as assert from \"power-assert\"`\n\nand assignments.\n\n* `assert = require(\"assert\")`\n* `assert = require(\"power-assert\")`\n\n\nOUR SUPPORT POLICY\n---------------------------------------\n\nWe support Node under maintenance. In other words, we stop supporting old Node version when [their maintenance ends](https://github.com/nodejs/LTS).\n\nThis means that any other environment is not supported.\n\nNOTE: If unassert works in any of the unsupported environments, it is purely coincidental and has no bearing on future compatibility. Use at your own risk.\n\n\nAUTHOR\n---------------------------------------\n* [Takuto Wada](https://github.com/twada)\n\n\nLICENSE\n---------------------------------------\nLicensed under the [MIT](https://github.com/unassert-js/unassert/blob/master/LICENSE) license.\n\n\n[unassert-url]: https://github.com/unassert-js/unassert\n[unassert-banner]: https://raw.githubusercontent.com/unassert-js/unassert-js-logo/master/banner/banner-official-fullcolor.png\n\n[npm-url]: https://npmjs.org/package/unassert\n[npm-image]: https://badge.fury.io/js/unassert.svg\n\n[travis-url]: https://travis-ci.org/unassert-js/unassert\n[travis-image]: https://secure.travis-ci.org/unassert-js/unassert.svg?branch=master\n\n[depstat-url]: https://gemnasium.com/unassert-js/unassert\n[depstat-image]: https://gemnasium.com/unassert-js/unassert.svg\n\n[license-url]: https://github.com/unassert-js/unassert/blob/master/LICENSE\n[license-image]: https://img.shields.io/badge/license-MIT-brightgreen.svg\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/unassert-js/unassert.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "version": "1.5.1"
}
